name: Bitonic sort tests
run-name: ${{ github.actor }} is running Bitonic sort tests.

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]

#env:
# Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
#  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    strategy:
      matrix:
        compiler: ["clang++", "g++"]
        build_type: ["Release", "Debug"]

    steps:
      - uses: actions/checkout@v3

      - name: "Install external dependencies"
        uses: ./.github/actions/install_dependencies

      - name: "Setup python venv"
        uses: ./.github/actions/python_venv

      # Install gold linker, which is part of bin utils.
      - name: "Setup gold linker"
        if:  matrix.compiler == 'clang++'
        run: sudo apt-get install binutils

      #- name: Install gtest manually
      #  run: sudo apt-get install libgtest-dev libgmock-dev

      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      - name: Configure CMake
        run: cmake --preset ${{ matrix.build_type }} -DCMAKE_CXX_COMPILER=${{ matrix.compiler }} -DGBENCHMARK_PATH=./GB_install/${{ matrix.build_type }}

      # Build your program with the given configuration
      - name: Build
        run: cmake --build ./build/${{ matrix.build_type }} --target install

      # Execute tests defined by the CMake configuration.
      - name: Test
        #working-directory: ${{github.workspace}}/build
        run: ctest --verbose --test-dir ./build/${{ matrix.build_type }}

      - name: run valgrind on tests
        if:  matrix.build_type == 'Debug'
        run: |
          sudo apt-get install libc6-dbg
          export VALGRIND_LIB=$(pwd)/valgrind/libexec/valgrind
          ./valgrind/bin/valgrind ./build/${{ matrix.build_type }}/test/bitonic_sort_test
        shell: bash

      - name: run benchmarks
        if:  matrix.build_type == 'Release'
        run: |
          source ./venv/bin/activate
          cd benchmarks
          chmod +x ./run_benchmarks.sh
          ./run_benchmarks.sh
          python ./plot_results.py
          tar -czvf results_${{ matrix.compiler }}.tar.gz ./results
        shell: bash

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v3
        if:  matrix.build_type == 'Release'
        with:
          name: benchmark-results
          path: ./benchmarks/results_${{ matrix.compiler }}.tar.gz
          retention-days: 5