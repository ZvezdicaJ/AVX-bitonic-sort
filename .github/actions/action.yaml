#Useful references:
# Meaning of "|" and ">": https://stackoverflow.com/questions/70496802/what-the-meaning-of-the-character-after-run-in-the-yml-file-of-github-ac

name: "install-packages"
description: "Install all required packages"

runs:
  using: "composite"
  steps:
    # Setup ninja.
    - name: Setup Ninja
      uses: ashutoshvarma/setup-ninja@master
      with:
        version: 1.11.0

    # Setup llvm.
    - name: Cache LLVM and Clang
      id: cache_llvm
      uses: actions/cache@v2
      with:
        path: |
          C:/Program Files/LLVM
          ./llvm
        key: llvm-15.0.6

    # Setup clang and llvm.
    - name: Install LLVM and Clang
      id: install_llvm
      uses: KyleMayes/install-llvm-action@v1
      with:
        version: "15.0.6"
        cached: ${{ steps.cache-llvm.outputs.cache-hit }}

    # If on linux, use apt-get to install gtest and gmock.
    - if: runner.os == 'Linux'
      name: Install gtest manually
      run: sudo apt-get install libgtest-dev libgmock-dev
      shell: bash

    - name: cache valgrind
      id: cache-valgrind
      uses: actions/cache@v3
      with:
        path: ./valgrind
        key: ${{ runner.os }}-valgrind

    - name: download and build valgrind
      if: steps.cache-valgrind.outputs.cache-hit != 'true'
      run: |
        wget "https://sourceware.org/pub/valgrind/valgrind-3.20.0.tar.bz2"
        tar -xf valgrind-3.20.0.tar.bz2
        cd valgrind-3.20.0
        ./configure --prefix=$(pwd)/../valgrind
        make -j
        make install
      shell: bash


    - name: cache google benchmark
      id: cache-GB
      uses: actions/cache@v3
      with:
        path: ./GB_install
        key: ${{ runner.os }}-GB

    - name: download and build valgrind
      if: steps.cache-valgrind.outputs.cache-hit != 'true'
      run: |
        git clone https://github.com/google/benchmark.git
        cd benchmark
        git checkout d572f47
        cmake -DCMAKE_BUILD_TYPE=Release -DBENCHMARK_DOWNLOAD_DEPENDENCIES=on -S . -B "build" -DCMAKE_INSTALL_PREFIX=../GB_install/Release
        cmake --build "build" --config Release --target install


        git clean -f -d
        cmake -DCMAKE_BUILD_TYPE=Debug -DBENCHMARK_DOWNLOAD_DEPENDENCIES=on -S . -B "build" -DCMAKE_INSTALL_PREFIX=../GB_install/Debug
        cmake --build "build" --config Debug --target install

      shell: bash